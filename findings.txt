Here i have put some more or less useful findings about the environment surrounding the "central" MitID login process

"""
This is an example of what an initial URL might compose of, specifically this is mitid.dk's login url
https://www.mitid.dk/administration/oauth/authorize?
    response_type=code&
    client_id=d49gtfqbkr9j1v60lr554ltk8q6e7tlt&
    exchangeUrl=%2Fadministration%2Foauth%2Fexchange&
    language=EN&
    redirect_uri=https%3A%2F%2Fwww.mitid.dk%2Fservice-provider%2Flogin&
    requestedAal=SUBSTANTIAL&
    requestedLoa=&
    serviceProvider=SELF_SERVICE_PORTAL&
    serviceProviderId=9d09e4fb-a05e-4cd2-832f-efa1dd245e9b&
    serviceProviderReference=Self%20Service%20Login&
    ssoGroupId=ceaef5ba-4f9e-4c9d-9814-3bd9e7ecb2e1&
    requestedAttributes=&
    referenceText=Log%20on%20at%20MitID.dk%20to%20view%20or%20change%20your%20MitID%20profile&
    roleNotAllowed=undefined
"""

aux_in_js_regex = re.compile(r"\$\(function\(\)\{initiateMitId\((\{.*\})\)\}\);")

def generateRandomString():
    return binascii.hexlify(Random.new().read(28)).decode("utf-8")

def generateChallenge():
    return base64.urlsafe_b64encode(hashlib.sha256(generateRandomString().encode("utf-8")).digest()).decode("utf-8").rstrip("=")

params = {
    "response_type": "code",
    "client_id": "e-boks-web",
    "redirect_uri": "https://digitalpost.e-boks.dk",
    "scope": "openid",
    "state": generateRandomString(),
    "nonce": generateRandomString(),
    "code_challenge": generateChallenge(),
    "code_challenge_method": "S256",
    "idp": "nemloginEboksRealm"
}

#r = s.get("https://google.dk")
#r = s.get("https://private.e-boks.com/")
#r = s.get("https://borger.dk")

#r = s.get("https://post.borger.dk/")

#print(s.headers)
#sys.exit(0)
#r = s.get("https://auth.post.borger.dk/web/auth/login?returnurl=https://post.borger.dk/&idp=nemloginRealm")

#s.headers['Referer'] = "https://digitalpost.e-boks.dk/"
#r = s.get("https://gateway.digitalpost.dk/auth/oauth/authorize", params=params)

#print(r.text)
#initialise_mitid_parameters = json.loads(aux_in_js_regex.findall(r.text)[0])
#print(initialise_mitid_parameters)

#aux = json.loads(base64.b64decode(initialise_mitid_parameters["Aux"]))